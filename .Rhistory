completedf$charlson_binary <- completedf$charlson_score > 5 # make the binary charlson score in case someone who uses this function wants it as a categorical variable
completedf$charlson_binary <- ifelse(completedf$charlson_binary == TRUE, ">5", "<5")
# make the 3 plots
# histogram: gene expression and frequency
# make the median line in the histogram
median_val <- median(completedf$gene_expression_data)
histogramplot <- ggplot(completedf, aes(x = gene_expression_data)) + # build a histogram plot of gene expression and frequency
geom_histogram(color = "pink", fill = "magenta") + # actual histogram bars
geom_vline(xintercept = median_val, color = "purple", linetype = "dashed", size = 1) + # add a line to show where the data median is
geom_text(aes(x = median_val, y = 5, label = paste("Median =", round(median_val, 2))), color = "purple", vjust = -10, hjust = -0.3) + # text to say what median is (next to median line)
labs(title = substitute(paste(italic(gene), " Gene Expression")), y = "Frequency", x = bquote(italic(.(gene)) ~ "Gene Expression")) + # labels
theme(plot.title = element_text(colour = "orange1", face = "bold", hjust = 0.5)) # for the plot title
final_plots <- c(final_plots, list(histogramplot)) # add this plot to our list
# scatter plot: gene expression and continuous covariate
scatterplot <- ggplot(completedf, aes(x = as.numeric(.data[[contvar]]), y = gene_expression_data)) + # build a scatterplot of gene expression and the given continuous covariate
labs(title = substitute(paste(italic(gene), " Gene Expression vs. ", contvar)), x = paste(contvar), y = bquote(italic(.(gene)) ~ "Gene Expression")) + # title
geom_point(color = "purple", alpha = 0.5) + # make the points purple and have them slightly see-through for easier viewing
geom_smooth(method = "lm", formula = y ~ x, color = "blue") + # make linear trend line
stat_cor(method = "pearson", label.x = 20, color = "blue") +
theme(plot.title = element_text(colour = "orange1", face = "bold", hjust = 0.6)) # colors/boldness for the plot title
# add the linear trend line equation onto the actual plot
# need linear model to get slope and intercept
lm_model <- lm(gene_expression_data ~ as.numeric(completedf[[contvar]]), data = completedf)
slope <- coef(lm_model)[2]
intercept <- coef(lm_model)[1]
# place the text using coordinates
xcoord <- 28
ycoord <- 0.43  # y-coordinate for the text
text_label <- paste(" y = ", round(slope, digits = 4), "x + ", round(intercept, digits = 2)) # I want to display the linear equation as the text
# add the text to the plot
scatterplot_with_text <- scatterplot +
geom_text(x = xcoord, y = ycoord, label = text_label, color = "blue")
final_plots <- c(final_plots, list(scatterplot_with_text)) # add this plot to our list
# box plot
# make main title look presentable
titlestring <- toString(list2catvars)
titlestring <- gsub("_", " ", titlestring)
titlestring <- gsub(",", "&", titlestring)
# make x and y axis labels look presentable
contvartitle <- str_to_title(contvar)
catvar1 <- gsub("_", " ", str_to_title(list2catvars[1]))
catvar2 <- gsub("_", " ", str_to_title(list2catvars[2]))
boxplot <- ggplot(completedf, aes(x = gene_expression_data, y = unlist(completedf[list2catvars[1]]), color = unlist(completedf[list2catvars[2]]))) + #create a boxplot of all 3 vars
geom_boxplot(position = position_dodge(width = 1.0)) + # use dodge (as requested)
geom_jitter() + # use jitter (as requested)
labs(title = substitute(paste(italic(gene), " Gene Expression with ", titlestring)), x = "Gene Expression", y = catvar1) + # add x and y labels
theme(plot.title = element_text(colour = "purple", hjust = 0.1, vjust = -1, size = 11)) + # title
scale_color_discrete(catvar2) + # make the legend title nice
coord_flip() # gene expression should go on the y axis
final_plots <- c(final_plots, list(boxplot)) # add this plot to our list
}
return(final_plots)
}
make3plots(df, c('CLEC3B', 'APOA1'), "age", c("charlson_binary", "mechanical_ventilation"))
library(ggpubr)
library(ggplot2)
make3plots <- function(df, genes, contvar, list2catvars){
# make a list to have all the final plots
final_plots <- list()
# first make a subset for each gene of interest
for (gene in genes){
completedf = subset(df, X == gene)
completedf$charlson_binary <- completedf$charlson_score > 5 # make the binary charlson score in case someone who uses this function wants it as a categorical variable
completedf$charlson_binary <- ifelse(completedf$charlson_binary == TRUE, ">5", "<5")
# make the 3 plots
# histogram: gene expression and frequency
# make the median line in the histogram
median_val <- median(completedf$gene_expression_data)
histogramplot <- ggplot(completedf, aes(x = gene_expression_data)) + # build a histogram plot of gene expression and frequency
geom_histogram(color = "pink", fill = "magenta") + # actual histogram bars
geom_vline(xintercept = median_val, color = "purple", linetype = "dashed", size = 1) + # add a line to show where the data median is
geom_text(aes(x = median_val, y = 5, label = paste("Median =", round(median_val, 2))), color = "purple", vjust = -10, hjust = -0.3) + # text to say what median is (next to median line)
labs(title = substitute(paste(italic(gene), " Gene Expression")), y = "Frequency", x = bquote(italic(.(gene)) ~ "Gene Expression")) + # labels
theme(plot.title = element_text(colour = "orange1", face = "bold", hjust = 0.5)) # for the plot title
final_plots <- c(final_plots, list(histogramplot)) # add this plot to our list
# scatter plot: gene expression and continuous covariate
scatterplot <- ggplot(completedf, aes(x = as.numeric(.data[[contvar]]), y = gene_expression_data)) + # build a scatterplot of gene expression and the given continuous covariate
labs(title = substitute(paste(italic(gene), " Gene Expression vs. ", contvar)), x = paste(contvar), y = bquote(italic(.(gene)) ~ "Gene Expression")) + # title
geom_point(color = "purple", alpha = 0.5) + # make the points purple and have them slightly see-through for easier viewing
geom_smooth(method = "lm", formula = y ~ x, color = "blue") + # make linear trend line
stat_cor(method = "pearson", label.x = 20, color = "blue") +
theme(plot.title = element_text(colour = "orange1", face = "bold", hjust = 0.6)) # colors/boldness for the plot title
# add the linear trend line equation onto the actual plot
# need linear model to get slope and intercept
lm_model <- lm(gene_expression_data ~ as.numeric(completedf[[contvar]]), data = completedf)
slope <- coef(lm_model)[2]
intercept <- coef(lm_model)[1]
# place the text using coordinates
xcoord <- 28
ycoord <- 0.43  # y-coordinate for the text
text_label <- paste(" y = ", round(slope, digits = 4), "x + ", round(intercept, digits = 2)) # I want to display the linear equation as the text
# add the text to the plot
scatterplot_with_text <- scatterplot +
geom_text(x = xcoord, y = ycoord, label = text_label, color = "blue")
final_plots <- c(final_plots, list(scatterplot_with_text)) # add this plot to our list
# box plot
# make main title look presentable
titlestring <- toString(list2catvars)
titlestring <- gsub("_", " ", titlestring)
titlestring <- gsub(",", "&", titlestring)
# make x and y axis labels look presentable
contvartitle <- str_to_title(contvar)
catvar1 <- gsub("_", " ", str_to_title(list2catvars[1]))
catvar2 <- gsub("_", " ", str_to_title(list2catvars[2]))
boxplot <- ggplot(completedf, aes(x = gene_expression_data, y = unlist(completedf[list2catvars[1]]), color = unlist(completedf[list2catvars[2]]))) + #create a boxplot of all 3 vars
geom_boxplot(position = position_dodge(width = 1.0)) + # use dodge (as requested)
geom_jitter() + # use jitter (as requested)
labs(title = substitute(paste(italic(gene), " Gene Expression with ", titlestring)), x = "Gene Expression", y = catvar1) + # add x and y labels
theme(plot.title = element_text(colour = "purple", hjust = 0.1, vjust = -1, size = 11)) + # title
scale_color_discrete(catvar2) + # make the legend title nice
coord_flip() # gene expression should go on the y axis
final_plots <- c(final_plots, list(boxplot)) # add this plot to our list
}
return(final_plots)
}
make3plots(df, c('CLEC3B', 'APOA1'), "age", c("charlson_binary", "mechanical_ventilation"))
setwd("../103RFinalProject") # set working directory
expressiondf <- read.csv(file = "QBS103_finalProject_geneExpression.csv", header = TRUE) # read data from csv file to make df
metadf <- read.csv(file = "QBS103_finalProject_metadata.csv", header = TRUE) # read data from csv file to make another df
library(tidyverse) # I am using Tidyverse in this project
library(ggplot2)
library(ggExtra) # and ggExtra and ggplot2
longexpressiondf <- expressiondf %>% # create a new df that is the long version of our original dataset
pivot_longer(cols = starts_with(c("COVID", "NONCOVID")),
names_to = "participant_id",
values_to = "gene_expression_data")
list_df = list(longexpressiondf, metadf) # link the two dfs together by using list() then reduce()
df <- list_df %>% reduce(inner_join, by='participant_id')
library(ggplot2) # we are using ggplot2 in this project
subset <- subset(df, X == 'CLEC3B') # create a subset of the df that includes only the gene of interest
subset
# to make the median line in the histogram
median_val <- median(subset$gene_expression_data)
histogramplot <- ggplot(subset, aes(x = gene_expression_data)) + # build a histogram plot of gene expression and frequency
geom_histogram(color = "pink", fill = "magenta") + # actual histogram bars
geom_vline(xintercept = median_val, color = "blue", linetype = "dashed", size = 1) + # add a line to show where the data median is
geom_text(aes(x = median_val, y = 5, label = paste("Median =", round(median_val, 2))),
color = "blue", vjust = -10, hjust = -0.3) +
labs(title = expression(paste(italic("CLEC3B"), " Gene Expression")), y = "Frequency", x = expression(paste(italic("CLEC3B"), " Gene Expression"))) + # labels
theme(plot.title = element_text(colour = "orange1", face = "bold", hjust = 0.5)) # for the plot title
histogramplot
scatterplot <- ggplot(subset, aes(x = gene_expression_data, y = ventilator.free_days)) +  # build a scatter plot of gene expression and ventilator days
labs(title = expression(paste(italic("CLEC3B"), "Gene Expression and Ventilator Days")), x = expression(paste(italic("CLEC3B"), " Gene Expression"), y = "Frequency"), y = "Ventilator Free Days") +
geom_point(color = "purple", alpha = 0.5) +
theme(plot.title = element_text(colour = "darkmagenta", face = "bold", hjust = 0.6)) # for the plot title
scatterplot
co <- c("mistyrose2", "lavender") # make my own color palette
subset$charlson_binary <- subset$charlson_score > 5 # make a new column that has T if the Charlson Score is extreme (more than 5) else it is F
boxplot <- ggplot(subset, aes(x = gene_expression_data, y = charlson_binary, color = mechanical_ventilation)) + #create a boxplot of gene expression, charlson score, and mechanical ventilation
geom_boxplot(position = position_dodge(width = 1.0)) +
geom_jitter() +
labs(title = expression(paste(italic("CLEC3B"), " Gene Expression, Charlson Score, and Mechanical Ventilation")), x = expression(paste(italic("CLEC3B"), " Gene Expression"), y = "Frequency"), y = "Charlson Binary") +
theme(plot.title = element_text(colour = "blue", face = "bold", hjust = 0.18, vjust = -2, size=10)) + # for the plot title
scale_fill_manual(labels=c("<5", ">5")) +
coord_flip() + # gene expression should actually be on the y axis
scale_y_discrete(labels=c("FALSE" = "Less than 5", "TRUE" = "More than 5\n(Extreme)")) # name the x axis by ><5
boxplot
library(ggpubr)
make3plots <- function(df, genes, contvar, list2catvars){
# make a list to have all the final plots
final_plots <- list()
# first make a subset for each gene of interest
for (gene in genes){
completedf = subset(df, X == gene)
completedf$charlson_binary <- completedf$charlson_score > 5 # make the binary charlson score in case someone who uses this function wants it as a categorical variable
completedf$charlson_binary <- ifelse(completedf$charlson_binary == TRUE, ">5", "<5")
# make the 3 plots
# histogram: gene expression and frequency
# make the median line in the histogram
median_val <- median(completedf$gene_expression_data)
histogramplot <- ggplot(completedf, aes(x = gene_expression_data)) + # build a histogram plot of gene expression and frequency
geom_histogram(color = "pink", fill = "magenta") + # actual histogram bars
geom_vline(xintercept = median_val, color = "purple", linetype = "dashed", size = 1) + # add a line to show where the data median is
geom_text(aes(x = median_val, y = 5, label = paste("Median =", round(median_val, 2))), color = "purple", vjust = -10, hjust = -0.3) + # text to say what median is (next to median line)
labs(title = substitute(paste(italic(gene), " Gene Expression")), y = "Frequency", x = bquote(italic(.(gene)) ~ "Gene Expression")) + # labels
theme(plot.title = element_text(colour = "orange1", face = "bold", hjust = 0.5)) # for the plot title
final_plots <- c(final_plots, list(histogramplot)) # add this plot to our list
# scatter plot: gene expression and continuous covariate
scatterplot <- ggplot(completedf, aes(x = as.numeric(.data[[contvar]]), y = gene_expression_data)) + # build a scatterplot of gene expression and the given continuous covariate
labs(title = substitute(paste(italic(gene), " Gene Expression vs. ", contvar)), x = paste(contvar), y = bquote(italic(.(gene)) ~ "Gene Expression")) + # title
geom_point(color = "purple", alpha = 0.5) + # make the points purple and have them slightly see-through for easier viewing
geom_smooth(method = "lm", formula = y ~ x, color = "blue") + # make linear trend line
stat_cor(method = "pearson", label.x = 20, color = "blue") +
theme(plot.title = element_text(colour = "orange1", face = "bold", hjust = 0.6)) # colors/boldness for the plot title
# add the linear trend line equation onto the actual plot
# need linear model to get slope and intercept
lm_model <- lm(gene_expression_data ~ as.numeric(completedf[[contvar]]), data = completedf)
slope <- coef(lm_model)[2]
intercept <- coef(lm_model)[1]
# place the text using coordinates
xcoord <- 28
ycoord <- 0.43  # y-coordinate for the text
text_label <- paste(" y = ", round(slope, digits = 4), "x + ", round(intercept, digits = 2)) # I want to display the linear equation as the text
# add the text to the plot
scatterplot_with_text <- scatterplot +
geom_text(x = xcoord, y = ycoord, label = text_label, color = "blue")
final_plots <- c(final_plots, list(scatterplot_with_text)) # add this plot to our list
# box plot
# make main title look presentable
titlestring <- toString(list2catvars)
titlestring <- gsub("_", " ", titlestring)
titlestring <- gsub(",", "&", titlestring)
# make x and y axis labels look presentable
contvartitle <- str_to_title(contvar)
catvar1 <- gsub("_", " ", str_to_title(list2catvars[1]))
catvar2 <- gsub("_", " ", str_to_title(list2catvars[2]))
boxplot <- ggplot(completedf, aes(x = gene_expression_data, y = unlist(completedf[list2catvars[1]]), color = unlist(completedf[list2catvars[2]]))) + #create a boxplot of all 3 vars
geom_boxplot(position = position_dodge(width = 1.0)) + # use dodge (as requested)
geom_jitter() + # use jitter (as requested)
labs(title = substitute(paste(italic(gene), " Gene Expression with ", titlestring)), x = "Gene Expression", y = catvar1) + # add x and y labels
theme(plot.title = element_text(colour = "purple", hjust = 0.1, vjust = -1, size = 11)) + # title
scale_color_discrete(catvar2) + # make the legend title nice
coord_flip() # gene expression should go on the y axis
final_plots <- c(final_plots, list(boxplot)) # add this plot to our list
}
return(final_plots)
}
make3plots(df, c('CLEC3B', 'APOA1'), "age", c("charlson_binary", "mechanical_ventilation"))
make3plots(df, c('PRTN3', 'LCN2'), "age", c("charlson_binary", "sex"))
# since we're working with age, I don't want the unknown values in there, otherwise I can't calculate the mean and sd
#age vector without unknowns
age_vector <- subset$age
age_vector <- age_vector[age_vector != "unknown"]
age_vector <- as.numeric(age_vector)
#calc its mean
mean_age <- mean(age_vector, na.rm = TRUE)
#replace all unknowns with mean
subset$age[subset$age == "unknown"] <- mean_age
subset$age[subset$age == " >89"] <- mean_age
subset$age <- as.numeric(subset$age)
subset$age
# we also don't want any unknowns in the sex catagory either
#replace all unknowns with female half the time
subset$sex <- trimws(subset$sex) # trimws gets rid of the white spaces so
unknown_indices <- which(subset$sex == "unknown")
replacement_values <- sample(c("male", "female"), size = length(unknown_indices), replace = TRUE)
subset$sex[unknown_indices] <- replacement_values
subset$sex
library(kableExtra)
buildTableOne <- function(df, threecat, threecont, gene) {
# Define an empty table
table <- matrix(nrow = 0, ncol = 2)
# Keep track of rows to indent
indentRows <- c()
for (cat in threecat) {
# Define new row for overall variable
newRow <- c(paste0('**', cat, '** n (%)'), '')
# Add row to data frame
table <- rbind(table, newRow)
# Loop through levels of variable
for (level in unique(df[[cat]])) {
# Calculate n and perc
n <- sum(df[[cat]] == level)
perc <- round(n / nrow(df) * 100, digits = 2)
# Combine values
value <- paste0(n, ' (', perc, '%)')
# Define new row
newRow <- c(level, value)
# Add row to data frame
table <- rbind(table, newRow)
# Add index to indented rows
indentRows <- c(indentRows, nrow(table))
}
}
for (cont in threecont){
x <- df[[cont]]
mean <- round(mean(x), 2)
sd <- round(sd(x), 2)
# Combine values
value <- paste0(mean, ' (', sd, ')')
# Define new row
if (cont == "gene_expression_data"){
newRow <- c(paste0('**', gene, ' Expression Data** Mean (sd)'), value)}
else {newRow <- c(paste0('**', cont, '** Mean (sd)'), value)}
# Add row to data frame
table <- rbind(table, newRow)
}
# define sample size for heading
sampleSize <- paste("n =", nrow(df))
# print table w labels/titles
kable(table, caption = 'Table',
col.names = c("Variable", sampleSize),
align = c('l', 'r'), escape = FALSE, row.names = FALSE) %>%
kable_styling() %>%
column_spec(1, bold = TRUE) %>%
add_indent(position = indentRows)
}
# Call the function with appropriate arguments
buildTableOne(subset, c("charlson_binary", "mechanical_ventilation", "sex"), c("hospital.free_days_post_45_day_followup", "ventilator.free_days", "age", "gene_expression_data"), "CLEC3B")
library(ggplot2)
library(ggExtra)
my_theme <- theme( # make a theme for the title so it is easy to see
plot.title = element_text(lineheight = 0.8, hjust = 0.5, vjust = -3, size = 6)
)
g <- ggplot(subset, aes(age, gene_expression_data)) + # I picked age and gene expression as the variables
geom_count() +
geom_smooth(method="lm") +
ylab("CLEC3B Gene Expression") +
xlab("Age") +
ggtitle(substitute(paste("Scatterplot with Marginal Histograms for", italic("CLEC3B"), "Gene Expression and Age"))) +
my_theme
plot1 <- ggMarginal(g, type = "histogram", fill="lightblue")
g
library(ggplot2)
library(ggExtra)
my_theme <- theme( # make a theme for the title so it is easy to see
plot.title = element_text(lineheight = 0.8, hjust = 0.5, vjust = -3, size = 6)
)
g <- ggplot(subset, aes(age, gene_expression_data)) + # I picked age and gene expression as the variables
geom_count() +
geom_smooth(method="lm") +
ylab("CLEC3B Gene Expression") +
xlab("Age") +
ggtitle(substitute(paste("Scatterplot with Marginal Histograms for", italic("CLEC3B"), "Gene Expression and Age"))) +
my_theme
plot1 <- ggMarginal(g, type = "histogram", fill="lightblue")
plot1
tengenes <- expressiondf[1:10, ] # select just 10 genes from the expression/original dataset
ten_genes <- as.data.frame(t(tengenes)) # transpose and remove the first row
names(ten_genes) <- ten_genes[1,]
ten_genes <- ten_genes[-1,]
#colnames(ten_genes) <- tengenes$X[-1] # make column names the gene names
tenmeta <- cbind(ten_genes, metadf)
tenmeta
library(RColorBrewer)
ten_genes <- as.data.frame(sapply(ten_genes, as.numeric))
scaledten_genes <- scale(ten_genes) # scale just the 10 genes dataframe
tenmeta$icu_status <- as.factor(tenmeta$icu_status)
tenmeta$sex <- as.factor(tenmeta$sex)
brewercolors <- brewer.pal(8, "Spectral")
set.seed(1)
annotations <- data.frame(row.names = rownames(tenmeta), "ICU" = tenmeta$icu_status, "Sex" = tenmeta$sex)
ten_genes <- na.omit(ten_genes)
na_matrix <- is.na(ten_genes)
any_na <- any(na_matrix)
if (any_na) {
print("There are NA values in the dataframe.")
} else {
print("There are no NA values in the dataframe.")
}
library(pheatmap) # need this package for heat map
heatmap <- pheatmap(ten_genes, clustering_distance_cols = 'euclidean', clustering_distance_rows = 'euclidean')
set.seed(1)
# make data
annotationData <- data.frame(row.names = rownames(tenmeta),
'ICU' = tenmeta$icu_status,
'Sex' = tenmeta$sex)
# make color palette
annotationColors <- list("ICU" = c(' no' = 'magenta4',
' yes' = 'gold'),
"Sex" = c('female' = 'orange2',
'male' = 'firebrick'))
pheatmap(scale(ten_genes),
cluster_row = TRUE,
cluster_cols = TRUE,
show_rownames = FALSE,
fontsize = 8,
main = "Heat Map of 10 Genes",
annotation_row = annotationData,
annotation_colors = annotationColors,
color = colorRampPalette(RColorBrewer::brewer.pal(9, "RdYlBu"))(100),
border_color = NA)  # This line removes the gray border
library(pheatmap) # need this package for heat map
heatmap <- pheatmap(ten_genes, clustering_distance_cols = 'euclidean', clustering_distance_rows = 'euclidean')
set.seed(1)
# make data
annotationData <- data.frame(row.names = rownames(tenmeta),
'ICU' = tenmeta$icu_status,
'Sex' = tenmeta$sex)
# make color palette
annotationColors <- list("ICU" = c(' no' = 'magenta4',
' yes' = 'gold'),
"Sex" = c('female' = 'orange2',
'male' = 'firebrick'))
# Compare row names in annotationData and ten_genes
rownames(annotationData)
rownames(ten_genes)
# Check unique values in the ICU and Sex columns of annotationData
unique(annotationData$ICU)
unique(annotationData$Sex)
pheatmap(scale(ten_genes),
cluster_row = TRUE,
cluster_cols = TRUE,
show_rownames = FALSE,
fontsize = 8,
main = "Heat Map of 10 Genes",
annotation_row = annotationData,
annotation_colors = annotationColors,
color = colorRampPalette(RColorBrewer::brewer.pal(9, "RdYlBu"))(100),
border_color = NA)  # This line removes the gray border
View(ten_genes)
library(pheatmap) # need this package for heat map
heatmap <- pheatmap(ten_genes, clustering_distance_cols = 'euclidean', clustering_distance_rows = 'euclidean')
set.seed(1)
# make data
annotationData <- data.frame(row.names = rownames(tenmeta),
'ICU' = tenmeta$icu_status,
'Sex' = tenmeta$sex)
# make color palette
annotationColors <- list("ICU" = c(' no' = 'magenta4',
' yes' = 'gold'),
"Sex" = c('female' = 'orange2',
'male' = 'firebrick'))
# Compare row names in annotationData and ten_genes
rownames(annotationData)
rownames(as.numeric(ten_genes))
library(pheatmap) # need this package for heat map
heatmap <- pheatmap(ten_genes, clustering_distance_cols = 'euclidean', clustering_distance_rows = 'euclidean')
set.seed(1)
# make data
annotationData <- data.frame(row.names = rownames(tenmeta),
'ICU' = tenmeta$icu_status,
'Sex' = tenmeta$sex)
# make color palette
annotationColors <- list("ICU" = c(' no' = 'magenta4',
' yes' = 'gold'),
"Sex" = c('female' = 'orange2',
'male' = 'firebrick'))
# Compare row names in annotationData and ten_genes
rownames(annotationData)
rownames(ten_genes <- apply(ten_genes, 2, as.numeric))
# Check unique values in the ICU and Sex columns of annotationData
unique(annotationData$ICU)
unique(annotationData$Sex)
pheatmap(scale(ten_genes),
cluster_row = TRUE,
cluster_cols = TRUE,
show_rownames = FALSE,
fontsize = 8,
main = "Heat Map of 10 Genes",
annotation_row = annotationData,
annotation_colors = annotationColors,
color = colorRampPalette(RColorBrewer::brewer.pal(9, "RdYlBu"))(100),
border_color = NA)  # This line removes the gray border
library(pheatmap) # need this package for heat map
heatmap <- pheatmap(ten_genes, clustering_distance_cols = 'euclidean', clustering_distance_rows = 'euclidean')
set.seed(1)
# make data
annotationData <- data.frame(row.names = rownames(tenmeta),
'ICU' = tenmeta$icu_status,
'Sex' = tenmeta$sex)
# make color palette
annotationColors <- list("ICU" = c(' no' = 'magenta4',
' yes' = 'gold'),
"Sex" = c('female' = 'orange2',
'male' = 'firebrick'))
# Compare row names in annotationData and ten_genes
rownames(annotationData)
rownames(ten_genes <- apply(ten_genes, 2, as.numeric))
# Check unique values in the ICU and Sex columns of annotationData
unique(annotationData$ICU)
unique(annotationData$Sex)
pheatmap(scale(ten_genes),
cluster_row = TRUE,
cluster_cols = TRUE,
show_rownames = FALSE,
fontsize = 8,
main = "Heat Map of 10 Genes",
annotation_row = annotationData,
annotation_colors = annotationColors,
color = colorRampPalette(RColorBrewer::brewer.pal(9, "RdYlBu"))(100),
border_color = NA)  # This line removes the gray border
library(pheatmap) # need this package for heat map
heatmap <- pheatmap(ten_genes, clustering_distance_cols = 'euclidean', clustering_distance_rows = 'euclidean')
set.seed(1)
# make data
annotationData <- data.frame(row.names = rownames(tenmeta),
'ICU' = tenmeta$icu_status,
'Sex' = tenmeta$sex)
# make color palette
annotationColors <- list("ICU" = c(' no' = 'magenta4',
' yes' = 'gold'),
"Sex" = c('female' = 'orange2',
'male' = 'firebrick'))
# Compare row names in annotationData and ten_genes
rownames(annotationData)
rownames(ten_genes)
# Check unique values in the ICU and Sex columns of annotationData
unique(annotationData$ICU)
unique(annotationData$Sex)
pheatmap(scale(ten_genes),
cluster_row = TRUE,
cluster_cols = TRUE,
show_rownames = FALSE,
fontsize = 8,
main = "Heat Map of 10 Genes",
annotation_row = annotationData,
annotation_colors = annotationColors,
color = colorRampPalette(RColorBrewer::brewer.pal(9, "RdYlBu"))(100),
border_color = NA)  # This line removes the gray border
library(pheatmap) # need this package for heat map
heatmap <- pheatmap(ten_genes, clustering_distance_cols = 'euclidean', clustering_distance_rows = 'euclidean')
set.seed(1)
# make data
annotationData <- data.frame(row.names = rownames(tenmeta),
'ICU' = tenmeta$icu_status,
'Sex' = tenmeta$sex)
# make color palette
annotationColors <- list("ICU" = c(' no' = 'magenta4',
' yes' = 'gold'),
"Sex" = c('female' = 'orange2',
'male' = 'firebrick'))
pheatmap(scale(ten_genes),
cluster_row = TRUE,
cluster_cols = TRUE,
show_rownames = FALSE,
fontsize = 8,
main = "Heat Map of 10 Genes",
annotation_row = annotationData,
annotation_colors = annotationColors,
color = colorRampPalette(RColorBrewer::brewer.pal(9, "RdYlBu"))(100),
border_color = NA)  # This line removes the gray border
